
/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

typeValue ::= [
   "number"	:"double",
   "string"	:"String",
   "boolean":"boolean",
   "void"	:"void",
   "id"		:"double",
   ""		:"",
   default	:"null"
]

printType ::= [
   "print"	:"System.out.print",
   "println":"System.out.println",
   default	:"null"
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////


stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------


class(name,stat) ::= <<
public class <name> {
	public static void main(String[] args) {
		<stats(stat)>
	}
}
>>

scope(stat) ::= <<
{
	<stats(stat)>
}
>>

//-------------------------------------------------------------------------------
//CLASS - ASSIGNMENTS------------------------------------------------------------
//-------------------------------------------------------------------------------


varAssignment(type, var, operation, previousStatements ) ::= <<
<stats(previousStatements)>
<if(type)><varDeclaration(type, var)><else><var><endif> = <operation>;
>>


//-------------------------------------------------------------------------------
//CONTROL FLOW-------------------------------------------------------------------
//-------------------------------------------------------------------------------


// CONDITION----------------------------------------------------------------------
ifCondition(previousStatements, logicalOperation, content) ::= <<
<stats(previousStatements)>
if(<logicalOperation>){
	<stats(content)>
}
>>

elseIfCondition(previousStatements, logicalOperation, content) ::= <<
<stats(previousStatements)>
else if(<logicalOperation>){
	<stats(content)>
}
>>
elseCondition(content) ::= <<
else {
	<stats(content)>
}
>>


// FOR LOOP-----------------------------------------------------------------------
forLoop(outsideStatements, logicalOperation, finalAssignment, content) ::= <<
<stats(outsideStatements)>	
while(true){
	if(<logicalOperation>) break;
	else{
		<stats(content)>
		
		<stats(finalAssignment)>
	}
}
>>


// WHILE LOOP---------------------------------------------------------------------
whileLoop(previousStatements, logicalOperation, content) ::= <<
<stats(previousStatements)>
while(<logicalOperation>){
	<stats(content)>
} 
>>

//-------------------------------------------------------------------------------
//PRINTS-------------------------------------------------------------------------
//-------------------------------------------------------------------------------
print(type, valueOrVarList, stat) ::= <<
<stats(stat)>
<printType.(type)>(<values(valueOrVarList)>);
>>

//-------------------------------------------------------------------------------
// VARS AND TYPES--------------------------------------------------------------------------
//------------------------------------------------------------------------------


varDeclaration(type, var) ::= <<
<type> <var>
>>

type(type) ::= <<
<typeValue.(type)>
>>

values(value) ::=<<
<value>
>>

