
/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

typeValue ::= [
   "numeric"		: "double",
   "string"			: "String",
   "boolean"		: "boolean",
   "void"			: "void",
   "list[numeric]"	: "List\<Double\>"
   "list[string]"	: "List\<String\>"
   "list[boolean]"	: "List\<Boolean\>"
   "dict[numeric]"	: "Map\<Double\>"
   "dict[string]"	: "Map\<String\>"
   "dict[boolean]"	: "Map\<Boolean\>"
   "id"				: "double",
   ""				: "",
   default			: "null"
]

printType ::= [
   "print"	:"System.out.print",
   "println":"System.out.println",
   default	:"null"
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////


stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

statsWithoutSeparator(stat) ::= <<
<if(stat)><stat; separator="; "><endif>
>>

//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------


class(name,stat) ::= <<
import java.util.*;
import java.io.*;

public class <name> {
	<stats(stat)>
}
>>

main(scope) ::= <<
public static void main(String[] args)
<stats(scope)>
>>

function() ::= <<
public static <returnType> <functionName>(<statsWithoutSeparator(args)>)
<stats(scope)>
>>

scope(stat) ::= <<
{
	<if(stat)><stat; separator="\n"><endif>
}
>>

//-------------------------------------------------------------------------------
//ASSIGNMENTS------------------------------------------------------------
//-------------------------------------------------------------------------------


varAssignment(type, var, operation, previousStatements ) ::= <<
<stats(previousStatements)>
<if(type)><type> <var><else><var><endif> = <operation>;
>>


//-------------------------------------------------------------------------------
//CONTROL FLOW-------------------------------------------------------------------
//-------------------------------------------------------------------------------


// CONDITION----------------------------------------------------------------------
ifCondition(previousStatements, logicalOperation, scope) ::= <<
<stats(previousStatements)>
if(<logicalOperation>)
<stats(scope)>
>>

elseIfCondition(previousStatements, logicalOperation, scope) ::= <<
<stats(previousStatements)>
else if(<logicalOperation>)
<stats(scope)>
>>
elseCondition(scope) ::= <<
else
<stats(scope)>
>>


// FOR LOOP-----------------------------------------------------------------------
forLoop(outsideStatements, logicalOperation, content) ::= <<
<stats(outsideStatements)>	
while(true){
	if(<logicalOperation>) break;
	else <stats(content)>
}
>>


// WHILE LOOP---------------------------------------------------------------------
whileLoop(previousStatements, logicalOperation, scope) ::= <<
<stats(previousStatements)>
while(<logicalOperation>)
<stats(scope)>
>>

//-------------------------------------------------------------------------------
//PRINTS-------------------------------------------------------------------------
//-------------------------------------------------------------------------------

print(type, expression, previousStatements) ::= <<
<stats(previousStatements)>
<printType.(type)>(<expression>)
>>

printWriterDeclaration(expression, path, var, previousStatements) ::= <<
<stats(previousStatements)>
String fileName = <path>;
PrintWriter <var> = new Printwriter(fileName);
>>

printWriter(var, expression, previousStatements) ::= <<
stats<previousStatements>
<var>.print(<expression>);
>>

//-------------------------------------------------------------------------------
// FUNCTIONS --------------------------------------------------------------------
//-------------------------------------------------------------------------------

functionCall(previousStatements, functionName, args) ::= <<
stats<previousStatements>
<functionName>(<statsWithoutSeparator(args)>)
>>

//-------------------------------------------------------------------------------
// VARS AND TYPES----------------------------------------------------------------
//-------------------------------------------------------------------------------

listDeclaration(value) ::= <<
ArrayList \< <value> \>
>>

dictDeclaration(key, value) ::= <<
HashMap \< <key>, <value> \>
>>

varDeclaration(type, var) ::= <<
<if(type)><type> <var><else><var><endif>;
>>

type(type) ::= <<
<type>
>>

values(value) ::=<<
<value>
>>

