
/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//[MJ] REVIEW (LOWER PRIORITY) -> array type
typeValue ::= [
   "number"	:"Double",
   "string"	:"String",
   "boolean":"Boolean",
   "void"	:"void",
   "id"		:"Double",
   ""		:"",
   default	:"null"
]

printType ::= [
   "print"	:"System.out.print",
   "println":"System.out.println",
   default	:"null"
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//[IJ] - DONE
statements(stat, controlflow) ::= <<
<stats(stat)><controlflowstats(controlflow)>
>>

// [MJ] DONE
stats(stat) ::= <<
<if(stat)><stat:{s|<s>;<\n>}><endif>
>>

//[IJ] - DONE
controlflowstats(controlflow) ::= <<
<if(controlflow)><controlflow; separator="\n"><endif>
>>

//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------

// [MJ] DONE
class(name,stat, controlflow) ::= <<
public class <name> {
	public static void main(String[] args) {
		<statements(stat, controlflow)>
	}
}
>>

//-------------------------------------------------------------------------------
//DECLARATION--------------------------------------------------------------------
//-------------------------------------------------------------------------------


// ARRAY DECLARATION--------------------------------------------------------------
/*
	ARRAYS WILL BE THE LAST ONES
	ARRAY '<' type ',' NUMBER'>' var
	arrayDeclaration(type, name, size) ::= <<
		<type> <name> [] = new <type> [<size>];
	>>
*/



//-------------------------------------------------------------------------------
//CLASS - ASSIGNMENTS------------------------------------------------------------
//-------------------------------------------------------------------------------

// VAR ASSIGNMENT----------------------------------------------------------------
//[MJ] DONE
varAssignment(type, var, operation, stat ) ::= <<
<stats(stat)>
<if(type)><varDeclaration(type, var)><else><var><endif> = <operation>
>>

// ARRAY ASSIGNMENT--------------------------------------------------------------
/*arrayAssignment(type, var, stat) ::= <<

>>*/


//-------------------------------------------------------------------------------
//FUNCTION-----------------------------------------------------------------------
//-------------------------------------------------------------------------------

// FUNCTION MAIN------------------------------------------------------------------


// FUNCTION ID--------------------------------------------------------------------
// [MJ] REVIEW (LOWER PRIORITY) -> args
function(name, return, arg) ::= <<
	public static <return> <name> ( <args(arg)> ) {
		<stats(stat)>
	}
>>



// [MJ] REVIEW (LOWER PRIORITY) -> problem with separator, if more than 1 arg, needs a comma, and i don't know how to implement it 
args(arg) ::= <<
<if(arg)><arg; separator=" "><endif>
>>

// FUNCTION CALL------------------------------------------------------------------


//-------------------------------------------------------------------------------
//CONTROL FLOW-------------------------------------------------------------------
//-------------------------------------------------------------------------------

// [IJ] DONE
// CONDITION----------------------------------------------------------------------
ifCondition(logicalOperation, stat) ::= <<
<if(stat)>if(<logicalOperation>){
	<stats(stat)>}<endif>
>>
elseIfCondition(logicalOperation, stat) ::= <<
<if(stat)>else if(<logicalOperation>){
	<stats(stat)>}<endif>
>>
elseCondition(stat) ::= <<
<if(stat)>else {
	<stats(stat)>}<endif>
>>

// [IJ] DONE
// FOR LOOP-----------------------------------------------------------------------
forLoop(firstAssignment, logicalOperation, finalAssignment, stat) ::= <<
for(<if(firstAssignment)><firstAssignment><endif>; <logicalOperation>; <finalAssignment>) {
	<stats(stat)>}
>>

// [IJ] DONE
// WHILE LOOP---------------------------------------------------------------------
whileLoop(logicalOperation, stat) ::= <<
<if(stat)>while(<logicalOperation>){
	<stats(stat)>}<else>
while(<logicalOperation>);
<endif>	           
>>

// [IJ] NOT DONE YET...
// WHEN---------------------------------------------------------------------------
when(var, valueList, statList) ::= <<
switch(<var>){
	<statList: { s | <valueList: { v | <whenCase(v,s)> }> }>
	<whenCase2(value, stat)>
	default: break;
}
>>
whenCase(value, stat) ::= <<
case <value>: <if(stat)><stats(stat)> <\n>break;<\n> <endif>
>>

//-------------------------------------------------------------------------------
//STRUCTURES---------------------------------------------------------------------
//-------------------------------------------------------------------------------

// ARRAY TYPE---------------------------------------------------------------------
arrayType(type) ::= "<type> []"

// ARRAY ACCESS-------------------------------------------------------------------
//...

// ARRAY LENGTH-------------------------------------------------------------------
arrayLength(var) ::= " <var>.length() "


//-------------------------------------------------------------------------------
//PRINTS-------------------------------------------------------------------------
//-------------------------------------------------------------------------------
print(type, valueOrVarList) ::= <<
<printType.(type)>(<if(valueOrVarList)><valueOrVarList><endif>)
>>

//-------------------------------------------------------------------------------
// VARS AND TYPES--------------------------------------------------------------------------
//------------------------------------------------------------------------------

//[MJ] DONE
varDeclaration(type, var) ::= <<
<type(type)> <var>
>>

//[MJ] DONE
value(value) ::=<<
<value>
>>

//[MJ] DONE
type(type) ::=<<
<typeValue.(type)>
>>
