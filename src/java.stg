
/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

typeValue ::= [
   "number"	:"Double",
   "string"	:"String",
   "boolean":"Boolean",
   "void"	:"void",
   "id"		:"Double",
   ""		:"",
   default	:"null"
]

printType ::= [
   "print"	:"System.out.print",
   "println":"System.out.println",
   default	:"null"
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

// [IJ] DONE
stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------

// [MJ] DONE
class(name,stat) ::= <<
public class <name> {
	public static void main(String[] args) {
		<stats(stat)>
	}
}
>>

//-------------------------------------------------------------------------------
//CLASS - ASSIGNMENTS------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] DONE
varAssignment(type, var, operation, stat ) ::= <<
<stats(stat)>
<if(type)><varDeclaration(type, var)><else><var><endif> = <operation>
>>

//-------------------------------------------------------------------------------
//FUNCTION-----------------------------------------------------------------------
//-------------------------------------------------------------------------------

// FUNCTION ID--------------------------------------------------------------------
// [MJ] REVIEW (LOWER PRIORITY) -> args
function(name, return, arg) ::= <<
	public static <return> <name> ( <args(arg)> ) {
		<stats(stat)>
	}
>>



// [MJ] REVIEW (LOWER PRIORITY) -> problem with separator, if more than 1 arg, needs a comma, and i don't know how to implement it 
args(arg) ::= <<
<if(arg)><arg; separator=" "><endif>
>>

// FUNCTION CALL------------------------------------------------------------------


//-------------------------------------------------------------------------------
//CONTROL FLOW-------------------------------------------------------------------
//-------------------------------------------------------------------------------

// [IJ] DONE
// CONDITION----------------------------------------------------------------------
ifCondition(previousStatements, logicalOperation, content) ::= <<
<stats(previousStatements)>
if(<logicalOperation>){
	<stats(content)>
}
>>
elseIfCondition(logicalOperation, content) ::= <<
else if(<logicalOperation>){
	<stats(content)>
}
>>
elseCondition(content) ::= <<
else {
	<stats(content)>
}
>>

// [IJ] DONE
// FOR LOOP-----------------------------------------------------------------------
forLoop(outsideStatements, logicalOperation, finalAssignment, content) ::= <<
<stats(outsideStatements)>	
while(true){
	if(<logicalOperation>) break;
	else{
		<stats(content)>
		
		<stats(finalAssignment)>
	}
}
>>

// [IJ] DONE
// WHILE LOOP---------------------------------------------------------------------
whileLoop(previousStatements, logicalOperation, content) ::= <<
<stats(previousStatements)>
while(<logicalOperation>){
	<stats(content)>
} 
>>

//-------------------------------------------------------------------------------
//PRINTS-------------------------------------------------------------------------
//-------------------------------------------------------------------------------
print(type, valueOrVarList) ::= <<
<printType.(type)>(<if(valueOrVarList)><valueOrVarList><endif>)
>>

//-------------------------------------------------------------------------------
// VARS AND TYPES--------------------------------------------------------------------------
//------------------------------------------------------------------------------

//[MJ] DONE
varDeclaration(type, var) ::= <<
<type> <var>
>>

type(type) ::= <<
<typeValue.(type)>
>>

