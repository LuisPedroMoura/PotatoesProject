/*
types {
    // Basic Types (numeric by default)
    meter	  	"m"
    inch	  	"in"
    time      	"s" 
    
    // Derived Types
    distance  		"m"   	: (1) meter | (2) inch
    velocity        "m/s"	: distance / time
	
    meterAcceleration	"m/s^2"	: velocity/time
	inchAcceleration	"in/s^2": inch/time^2
	acceleration	"a"	: (1) meterAcceleration | (2) inchAcceleration
}

*/
	//--------------------
	//declaration---------
	//--------------------
	acceleration globalAcceleration;
	
	//--------------------
	//assignments---------
	//--------------------
	distance dist = (distance) 10;
	time t = (time) 5;
	
	fun main{
	
	
		//--------------------
		//assignments---------
		//--------------------
		
			println("var_declaration assignment_operator function_call");
				velocity v1 = calcVelocity(dist, t);			
				velocity v2 = calcVelocity(dist, (time) 2);
			
			println("array_declaration assignment_operator values_list");
				Array<velocity> velocities = {v1, v2, (velocity)2, (velocity)9.0, (velocity)0.998};
				//error -> Array<velocity> velocities = { 2*9 };
				//error -> sem cast
		
			println("var assignment_operator function_call");
				globalAcceleration = calcGlobalAcceleration();
				
			println("var assignment_operator function_call()");
			println("	-> function_call(var, operation(array_access / cast NUMBER))");
				a = biggerAcceleration( globalAcceleration, velocities[0] / (time) 2 );
			
			println("whatever function")
			boolean b = whatever();
			println("result: " + b);
	}
	
	fun calcVelocity(distance d, time t): velocity{
		return d / t; 
	}
	
	fun calcGlobalAcceleration(): acceleration{
		acceleration a = dist/t^2;
		return a;
	}
	
	fun biggerAcceleration(acceleration a1, acceleration a2): acceleration{
		if(a1>a2){ return a1; } 
		return a2;
	}
	
	fun distance2KiloDistance (Array<distance> dist) : Array<distance> {
	
		for(number i=0; i < length(dist); i++){
			dist[i] = dist[i] * 10^3;	// 10^-3 erro?									
		}
		
		return dist;
	}
	
	fun whatever() : boolean{
	
		Array<inch> inches = {(inch)2, (inch)9.0, (inch)0.998};
		Array<inch> kiloInches = distance2KiloDistance(inches);
		
		number i = 0;
		while(i<length(inches)){
			number n1 = inches[i] + -2;
			number n2 = -2 + inches[i];
			number n3 = inches[i] + -2 - 5;
			number n4 = -inches[i] - 5;
			println("inches[i] + -2 = " + n1);
			println("-2 + inches[i] = " + n2);
			println("inches[i] + -2 - 5 = " + n3);
			println("-inches[i] - 5 = " + n4);
		}
		
		
		
		inch kinch = kiloInches[0];
		when(kinch){
			2 -> { return false; }
			2000 -> { return true; }
		}
		
		return true;
	
	}
	
	
	
	
	
	
		