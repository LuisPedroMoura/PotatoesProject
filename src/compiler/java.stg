/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

/*
type				: NUMBER_TYPE		# type_Number_Type
					| BOOLEAN_TYPE		# type_Boolean_Type
					| STRING_TYPE		# type_String_Type
					| VOID_TYPE			# type_Void_Type
					| ID				# type_ID_Type
					| arrayType			# type_ArrayType
					;
*/

//[MJ] REVIEW (LOWER PRIORITY) -> array type
typeV ::= [
   "number"	:"double",
   "string"	:"String",
   "boolean":"boolean",
   ""		:"",
   default	:"double"
]

	
//[MJ] REVIEW -> ^
operators ::= [
	"("		:"(",
	")"		:")",
   	"*"		:"*",
   	"/"		:"/",
   	"%"		:"%",
   	"+"		:"+",
   	"-"		:"-",
   	"=="	:"==",
   	"!="	:"!=",
   	"&&"	:"&&",
   	"||"	:"||",
   	"!"		:"!",
   default	:""
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//[MJ] DONE
stats(stat) ::= <<
	<if(stat)><stat; separator="\n"><endif>
>>



//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] DONE
class(name,stat) ::= <<
public class <name> {
   <stats(stat)>
}
>>


//-------------------------------------------------------------------------------
//DECLARATION--------------------------------------------------------------------
//-------------------------------------------------------------------------------

/*
	ARRAYS WILL BE THE LAST ONES
	ARRAY '<' type ',' NUMBER'>' var
	arrayDeclaration(type, name, size)
*/

//[MJ] DONE
varDeclaration(type, var) ::= <<
<typeV.(type)> <var> ; <\n>
>>



//-------------------------------------------------------------------------------
//ASSIGNMENT---------------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] DONE
varAssignment(type, var, stat) ::= <<
<typeV.(type)> <var> = <stat>; <\n>	
>>

//-------------------------------------------------------------------------------
//FUNCTION-----------------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] DONE
main(stat)::= <<
public static void main(String[] args) {
   <stats(stat)>
}
>>


//[MJ] REVIEW (LOWER PRIORITY) -> args
function(name, return, arg) ::= <<
public static <return> <name> ( <args(arg)> ) {
   <stats(stat)>
}
>>

//[MJ] REVIEW (LOWER PRIORITY) -> problem with separator, if more than 1 arg, needs a comma, and i don't know how to implement it 
args(arg) ::= <<
	<if(arg)>< <arg> separator=" "><endif>
>>



<!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
CONTROL FLOW !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!>

<! compareOperator	:'==' | '!=' | '<' | '<=' | '>' | '>='; !> compareOperators ::= [ "==":"==", "!=":"!=", "<'":"<'", "<=":"<=", ">":">", ">=":">=", default:"null" ]

<![IJ] NOT DONE YET...!>

<! whileLoop		:                                       !> whileLoop(lo, stat) ::= <<
<!                    WHILE '(' logicalOperation ')'        !>   L<lo>33:;      if (!<lo>) goto L<lo>44;
<!                    ( '{' statement* '}' | EOL )          !>   <stats(stat)>  goto L<lo>33;             
<! 					;                                       !>   L<lo>44:;		<endif>
 			
<! condition		:                                       !> condition(l1,l2, s1, s2, s3) ::= <<
<!                    IF '(' l1=logicalOperation ')'        !>   if (!<l1>)     goto L<l1>11;
<!                    '{' s1=statement* '}'                 !>   <stats(s1)>    goto L<l1>22;   L<l1>11:; 
<! 					  ( ELSE IF '(' l2=logicalOperation ')' !>   <if(!<l2>)>    goto L<l2>33;                               
<!                      '{' s2=statement* '}'               !>   <stats(s2)>    goto L<l2>44;   L<l2>33:;                    
<!                    )*                                    !>                                         
<! 					  ( ELSE '{' s3=statement* '}'          !>   <stats(s3)>                                
<!                    )?                                    !>   <endif>        L<l2>44:;	                      
<! 					;                                       !> >> 


//-------------------------------------------------------------------------------
//LOGICAL OPERATIONS-------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] REVIEW -> parenthesis really necessary? not? use just comparison
logicalOperation( parenthesis0, logicalOperand0, operator, logicalOperand1, parenthesis1 ) ::= <<
<operators.(parenthesis0)> <logicalOperand0> <operators.(operator)> <logicalOperand1> <operators.(parenthesis1)>
>>


//[MJ] DONE
logicalOperand(not, operand) ::= <<
<operators.(not)><operand>
>>

//[MJ] DONE
comparison(operation0, compareOperator, operation1) ::= <<
<operation0> <compareOperator> <operation1>
>>


<! type				: NUMBER_TYPE		                    !> typeValue ::= [ "number"  : "int",
<! 					| BOOLEAN_TYPE		                    !>                 "boolean" : "int", 
<! 					| STRING_TYPE		                    !>                 "string"  : "String",
<! 					| VOID_TYPE			                    !>                 "void"    : "void", 
<! 					| ID				                    !>                 
<! 					| arrayType			                    !>
<! 					;                                       !>                 default   : "null" ]
	

<! BOOLEAN          : 'false' | 'true';                     !> booleanValue ::= [ "false":"0", "true":"1", default:"null" ]






