
/////////////////////////////////////////////////////////////////////////////////////////////////////
// DICTIONARIES /////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//[MJ] REVIEW (LOWER PRIORITY) -> array type
typeValue ::= [
   "number"	:"Double",
   "string"	:"String",
   "boolean":"Boolean",
   "void"	:"void",
   "id"		:"Double",
   ""		:"",
   default	:"null"
]

	
//[MJ] REVIEW 	-> ^
// 				-> <, and <= -> error
//				-> ( ) are needed?
operators ::= [
	"("		:"(",
	")"		:")",
   	"*"		:"*",
   	"/"		:"/",
   	"%"		:"%",
   	"+"		:"+",
   	"-"		:"-",
   	"=="	:"==",
   	"!="	:"!=",
   	"&&"	:"&&",
   	"||"	:"||",
   	"!"		:"!",
   default	:"" //because of assignments of vars already declared
]


//
booleanValue ::= [
	"false"	:"false",
	"true"	:"true",
	default:"null"
]


/////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATES ////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////


// [MJ] DONE
stats(stat) ::= <<
<if(stat)><stat; separator=";\n"><endif>
>>


//-------------------------------------------------------------------------------
//CLASS--------------------------------------------------------------------------
//-------------------------------------------------------------------------------

// [MJ] DONE
class(name,stat) ::= <<
public class <name> {
   <stats(stat)>
}
>>

//-------------------------------------------------------------------------------
//DECLARATION--------------------------------------------------------------------
//-------------------------------------------------------------------------------


// ARRAY DECLARATION--------------------------------------------------------------
/*
	ARRAYS WILL BE THE LAST ONES
	ARRAY '<' type ',' NUMBER'>' var
	arrayDeclaration(type, name, size) ::= <<
		<type> <name> [] = new <type> [<size>];
	>>
*/



//-------------------------------------------------------------------------------
//CLASS - ASSIGNMENTS---------------------------------------------------------------------
//-------------------------------------------------------------------------------

// VAR ASSIGNMENT----------------------------------------------------------------
//[MJ] DONE
varAssignment(type, var, value, stat ) ::= <<
<stats(stat)>
<varDeclaration(type, var)> = <value>	
>>

// ARRAY ASSIGNMENT--------------------------------------------------------------
/*arrayAssignment(type, var, stat) ::= <<

>>*/


//-------------------------------------------------------------------------------
//FUNCTION-----------------------------------------------------------------------
//-------------------------------------------------------------------------------

// FUNCTION MAIN------------------------------------------------------------------
main(stat)::= <<
	public static void main(String[] args) {
		<stats(stat)>
	}
>>


// FUNCTION ID--------------------------------------------------------------------
// [MJ] REVIEW (LOWER PRIORITY) -> args
function(name, return, arg) ::= <<
	public static <return> <name> ( <args(arg)> ) {
		<stats(stat)>
	}
>>



// [MJ] REVIEW (LOWER PRIORITY) -> problem with separator, if more than 1 arg, needs a comma, and i don't know how to implement it 
args(arg) ::= <<
<if(arg)>< <arg> separator=" "><endif>
>>

// FUNCTION CALL------------------------------------------------------------------


/*********************************************************************************
CONTROL FLOW**********************************************************************
*********************************************************************************/

// [IJ] NOT DONE YET...

// CONDITION----------------------------------------------------------------------
condition(logicalOperationList, statList) ::= << 
	<statList: 
		{ y | <trunc(logicalOperationList):{ n | if  (<n>){<stats(y)>}}; separator="\nelse ">
			  <last(logicalOperationList) :{ n | else(<n>){<stats(y)>}}>    
		}                               
	>                         
>>

// FOR LOOP-----------------------------------------------------------------------
forLoop(firstAssig, lOp, finalAssig, stat) ::= <<
    for( <if(firstAssig)> firstAssig <endif> ; lOp ; finalAssig ) { <stats(stat)> }
>>

// WHILE LOOP---------------------------------------------------------------------
whileLoop(lo, stat) ::= <<
	<if(stat)>		while(lo){<stats(stat)>} 	
	<else>			while(lo);				 	
	<endif>	           
>>

// WHEN---------------------------------------------------------------------------
whenCase(var, valueList, statList) ::= <<
    switch(<var>){
        <statList: { y | <valueList: { x | case <x> : <if(y)> <stats(y)> break; <endif> } > } >
		default: break;
    }
>>


//-------------------------------------------------------------------------------
//LOGICAL OPERATIONS-------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] REVIEW -> parenthesis really necessary? not? use just comparison
logicalOperation( parenthesis0, logicalOperand0, operator, logicalOperand1, parenthesis1 ) ::= <<
<operators.(parenthesis0)> <logicalOperand0> <operators.(operator)> <logicalOperand1> <operators.(parenthesis1)>
>>


//[MJ] DONE
logicalOperand(not, operand) ::= <<
<operators.(not)><operand>
>>

//[MJ] DONE
comparison(operand0, compareOperator, operand1, stat) ::= <<
<stats(stat)>
<operationConcatenation(operand0,compareOperator,operand1)>
>>


//-------------------------------------------------------------------------------
//OPERATIONS---------------------------------------------------------------------
//-------------------------------------------------------------------------------

//[MJ] DONE
operations(resultType, var, operand0, operation, operand1, stat) ::= <<
<stats(stat)>
<varAssignment(resultType, var, operationConcatenation(operand0, operation, operand1))>
>>

operationConcatenation(operand0, operation, operand1) ::= <<
<operand0><operation><operand1>
>>




//-------------------------------------------------------------------------------
//STRUCTURES---------------------------------------------------------------------
//-------------------------------------------------------------------------------

// ARRAY TYPE---------------------------------------------------------------------
arrayType(type) ::= "<type> []"

// ARRAY ACCESS-------------------------------------------------------------------
//...

// ARRAY LENGTH-------------------------------------------------------------------
arrayLength(var) ::= " <var>.length() "


//-------------------------------------------------------------------------------
//PRINTS-------------------------------------------------------------------------
//-------------------------------------------------------------------------------

//...


//-------------------------------------------------------------------------------
// VARS AND TYPES--------------------------------------------------------------------------
//------------------------------------------------------------------------------

//[MJ] DONE
varDeclaration(type, var) ::= <<
<type> <var>
>>

//[MJ] DONE
value(value) ::=<<
<value>
>>

//[MJ] DONE
type(type) ::=<<
<typeValue.(type)>
>>
